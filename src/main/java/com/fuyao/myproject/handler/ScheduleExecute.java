package com.fuyao.myproject.handler;import com.fuyao.myproject.Thread.SQLFireExecutor;import com.fuyao.myproject.controller.GoodsController;import com.fuyao.myproject.entity.Queue;import com.fuyao.myproject.entity.Schedule;import com.fuyao.myproject.mapper.ScheduleMapper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Lazy;import org.springframework.scheduling.Trigger;import org.springframework.scheduling.TriggerContext;import org.springframework.scheduling.annotation.EnableScheduling;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.scheduling.annotation.SchedulingConfigurer;import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;import org.springframework.scheduling.config.ScheduledTaskRegistrar;import org.springframework.scheduling.support.CronTrigger;import org.springframework.stereotype.Component;import org.springframework.util.StringUtils;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.concurrent.Executor;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledFuture;/** * @description:調度任務執行，Spring动态周期定时任务可以在不停应用的情况下更改任务执行周期 * @author: fuyao * @time: 2021/1/20 15:02 */@Lazy(false)@Component@EnableSchedulingpublic class ScheduleExecute implements SchedulingConfigurer {    private static final Logger logger = LoggerFactory.getLogger(ScheduleExecute.class);    private final Queue queue = new Queue();    @Autowired    private ScheduleMapper mapper;//    private static String cron = "*/1 * * * * ?"; //默认晚上00:00:00 执行//    private static int status = 1;              //0 开启  1 关闭    private String SpringDynamicCronTask() {        String cron = "0/5 * * * * ?";        //从数据库获得配置的corn表达式//        RobotSysSwitch switchById = switchService.getSwitchById(5L);//        cron = switchById.getSwitchFlag();        String status = mapper.getSystemValue("schedule_flag");        if(status.equals("0")){            cron = "0 0 1 * * ?";//每天凌晨1点执行        }else if(status.equals("1")){            cron = "*/1 * * * * ?";        }        logger.info("cron:"+cron);        return cron;    }//    public void setIs_open(int is_open) {//        status = is_open;//    }////    private void start() {//        future = scheduler.schedule(() -> {//            List<Schedule> list = new ArrayList<>();////            try {////            if(flag.equals("0")){//                logger.info("开始调度任务");////                mapper.updateSystemValue("schedule_flag","1");//                list = mapper.findAllSchedule();//                logger.info("共查询到"+list.size()+"个调度任务,任务列表："+list);//                logger.info("当前调度队列"+queue);//                for (Schedule cfg:list) {//                    if(!StringUtils.isEmpty(cfg.getSchedule_type())&&cfg.getSchedule_type().equals("0")){//日调度//                        SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");//                        String currentDate = sdf.format(System.currentTimeMillis()).substring(0,11);//                        String time1 = currentDate+cfg.getExecute_time();//                        String time2 = sdf.format(System.currentTimeMillis());//                        logger.info(time1+"=="+time2);//                        if(time1.equals(time2)) {//                            queue.enq(cfg);//                            logger.info("开始执行日调度任务，当前队列" + queue.toString());//                            //更新日期字段//                            mapper.updateStartTime(cfg.getCfg_id());////                        if(cfg.getSchedule_status().equals("0")){////                            queue.enq(cfg);////                        }//                        }//                    }else if(!StringUtils.isEmpty(cfg.getSchedule_type())&&cfg.getSchedule_type().equals("1")){//月调度//                        SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");//                        String currentMouth = sdf.format(System.currentTimeMillis()).substring(0,8);//                        Date cfgDate = sdf.parse(currentMouth+cfg.getExecute_time());//                        if(sdf.format(cfgDate).equals(sdf.format(System.currentTimeMillis()))){//                            queue.enq(cfg);//                            logger.info("开始执行月调度任务，当前队列"+queue.toString());//                            //更新日期字段//                            mapper.updateStartTime(cfg.getCfg_id());//                        }////                        if(cfg.getSchedule_status().equals("0")){////                            queue.enq(cfg);////                        }//                    }else if(!StringUtils.isEmpty(cfg.getSchedule_type())&&cfg.getSchedule_type().equals("2")){//即时调度//                        SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");//                        Date cfgDate = sdf.parse(cfg.getExecute_time());//                        if(sdf.format(cfgDate).equals(sdf.format(System.currentTimeMillis()))){//                            queue.enq(cfg);//                            logger.info("开始执行即时调度任务，当前队列"+queue.toString());//                            //更新日期字段//                            mapper.updateStartTime(cfg.getCfg_id());//                        }//                    }//                }////            }//                if(!queue.isEmpty()){//                    SQLFireExecutor sqlFireExecutor = new SQLFireExecutor(queue);////                sqlFireExecutor.start();//                    SQLFireExecutor.isAlive();//                    sqlFireExecutor.run();//                }//            }catch (Exception e){//                logger.error(e.getMessage());//                e.printStackTrace();//            }//            //TODO 业务逻辑//        }, (triggerContext) -> {//            CronTrigger trigger = new CronTrigger(cron);//            return trigger.nextExecutionTime(triggerContext);//        });//    }    //讀取調度任務表//    @Scheduled(cron =" */1 * * * * ?")//    public void execute(){////        String flag = mapper.getSystemValue("schedule_flag");//        List<Schedule> list = new ArrayList<>();////        try {////            if(flag.equals("0")){//                logger.info("开始调度任务");////                mapper.updateSystemValue("schedule_flag","1");//                list = mapper.findAllSchedule();//                logger.info("共查询到"+list.size()+"个调度任务,任务列表："+list);//                logger.info("当前调度队列"+queue);//                for (Schedule cfg:list) {//                    if(!StringUtils.isEmpty(cfg.getSchedule_type())&&cfg.getSchedule_type().equals("0")){//日调度//                    SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");//                    String currentDate = sdf.format(System.currentTimeMillis()).substring(0,11);//                    String time1 = currentDate+cfg.getExecute_time();//                    String time2 = sdf.format(System.currentTimeMillis());//                    logger.info(time1+"=="+time2);//                        if(time1.equals(time2)) {//                        queue.enq(cfg);//                        logger.info("开始执行日调度任务，当前队列" + queue.toString());//                        //更新日期字段//                        mapper.updateStartTime(cfg.getCfg_id());////                        if(cfg.getSchedule_status().equals("0")){////                            queue.enq(cfg);////                        }//                     }//                    }else if(!StringUtils.isEmpty(cfg.getSchedule_type())&&cfg.getSchedule_type().equals("1")){//月调度//                        SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");//                        String currentMouth = sdf.format(System.currentTimeMillis()).substring(0,8);//                        Date cfgDate = sdf.parse(currentMouth+cfg.getExecute_time());//                        if(sdf.format(cfgDate).equals(sdf.format(System.currentTimeMillis()))){//                            queue.enq(cfg);//                            logger.info("开始执行月调度任务，当前队列"+queue.toString());//                            //更新日期字段//                            mapper.updateStartTime(cfg.getCfg_id());//                        }////                        if(cfg.getSchedule_status().equals("0")){////                            queue.enq(cfg);////                        }//                    }else if(!StringUtils.isEmpty(cfg.getSchedule_type())&&cfg.getSchedule_type().equals("2")){//即时调度//                        SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");//                        Date cfgDate = sdf.parse(cfg.getExecute_time());//                        if(sdf.format(cfgDate).equals(sdf.format(System.currentTimeMillis()))){//                            queue.enq(cfg);//                            logger.info("开始执行即时调度任务，当前队列"+queue.toString());//                            //更新日期字段//                            mapper.updateStartTime(cfg.getCfg_id());//                        }//                    }//                }////            }//            if(!queue.isEmpty()){//                SQLFireExecutor sqlFireExecutor = new SQLFireExecutor(queue);////                sqlFireExecutor.start();//                SQLFireExecutor.isAlive();//                sqlFireExecutor.run();//            }//        }catch (Exception e){//            logger.error(e.getMessage());//            e.printStackTrace();//        }////    }    public void startQueue(Queue queue){    }    @Override    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {        scheduledTaskRegistrar.addTriggerTask(new Runnable() {            @Override            public void run() {                // 任务逻辑                logger.info("============================task_task_tak=============================");                try {                    List<Schedule> list = new ArrayList<>();                    list = mapper.findAllSchedule();                    logger.info("共查询到" + list.size() + "个调度任务,任务列表：" + list);                    logger.info("当前调度队列" + queue);                    for (Schedule cfg : list) {                        if (!StringUtils.isEmpty(cfg.getSchedule_type()) && cfg.getSchedule_type().equals("0")) {//日调度                            SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");                            String currentDate = sdf.format(System.currentTimeMillis()).substring(0, 11);                            String time1 = currentDate + cfg.getExecute_time();                            String time2 = sdf.format(System.currentTimeMillis());                            logger.info(time1 + "==" + time2);                            if (time1.equals(time2)) {                                queue.enq(cfg);                                logger.info("开始执行日调度任务，当前队列" + queue.toString());                                //更新日期字段                                mapper.updateStartTime(cfg.getCfg_id());//                        if(cfg.getSchedule_status().equals("0")){//                            queue.enq(cfg);//                        }                            }                        } else if (!StringUtils.isEmpty(cfg.getSchedule_type()) && cfg.getSchedule_type().equals("1")) {//月调度                            SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");                            String currentMouth = sdf.format(System.currentTimeMillis()).substring(0, 8);                            Date cfgDate = sdf.parse(currentMouth + cfg.getExecute_time());                            if (sdf.format(cfgDate).equals(sdf.format(System.currentTimeMillis()))) {                                queue.enq(cfg);                                logger.info("开始执行月调度任务，当前队列" + queue.toString());                                //更新日期字段                                mapper.updateStartTime(cfg.getCfg_id());                            }//                        if(cfg.getSchedule_status().equals("0")){//                            queue.enq(cfg);//                        }                        } else if (!StringUtils.isEmpty(cfg.getSchedule_type()) && cfg.getSchedule_type().equals("2")) {//即时调度                            SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/DD HH:mm:ss");                            Date cfgDate = sdf.parse(cfg.getExecute_time());                            if (sdf.format(cfgDate).equals(sdf.format(System.currentTimeMillis()))) {                                queue.enq(cfg);                                logger.info("开始执行即时调度任务，当前队列" + queue.toString());                                //更新日期字段                                mapper.updateStartTime(cfg.getCfg_id());                            }                        }                    }//            }                    if (!queue.isEmpty()) {                        SQLFireExecutor sqlFireExecutor = new SQLFireExecutor(queue);//                sqlFireExecutor.start();                        SQLFireExecutor.isAlive();                        sqlFireExecutor.run();                    }                } catch (Exception e) {                    logger.error(e.getMessage());                    e.printStackTrace();                }            }        }, new Trigger() {            @Override            public Date nextExecutionTime(TriggerContext triggerContext) {                String s = SpringDynamicCronTask();                // 任务触发，可修改任务的执行周期                CronTrigger trigger = new CronTrigger(s);                Date nextExec = trigger.nextExecutionTime(triggerContext);                return nextExec;            }        });    }    @Bean    public Executor taskExecutor(){        return Executors.newScheduledThreadPool(10);    }}